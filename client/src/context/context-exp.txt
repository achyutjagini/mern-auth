import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { AuthProvider } from './AuthContext';

ReactDOM.render(
  <AuthProvider>
    <App />
  </AuthProvider>,
  document.getElementById('root')
);

In this example, AuthProvider is the context provider 
that stores the user state and provides the login and logout functions to modify it.



import React, { useState, createContext } from 'react';
export const AuthContext = createContext();
export const AuthProvider = ({ children }) => {

    const [user, setUser] = useState(null); //this is an state of type object

    const login = (userObj) => {
        setUser(userObj);
    };

    const logout = () => {
        setUser(null);
    };

    return (
        <AuthContext.Provider value={{ user, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};



import React, { useContext } from 'react';
import { AuthContext } from './AuthContext';
const Dashboard = () => {
  const { user, logout } = useContext(AuthContext);

  const handleLogout = () => {
    logout();
  };

  return (
    <div>
      <h1>Welcome, {user.name}!</h1>
      <button onClick={handleLogout}>Logout</button>
    </div>
  );
};
export default Dashboard;




In this example, AuthProvider is the context provider that stores the user state
and provides the login and logout functions to modify it. MyComponent is a
child component that can access the user, login, and logout values 
using the useContext hook.

In this case, when the "Log in" button is clicked, the login function
is called with a user object containing the username, which updates
the user state. Similarly, the "Log out" button calls the logout
function, which sets user back to null.




import React, { useContext } from 'react';
import { AuthContext } from './AuthContext';

const MyComponent = () => {
  const { user, login, logout } = useContext(AuthContext);

  return (
    <div>
      <p>Current user: {user ? user.username : 'None'}</p>
      <button onClick={() => login({ username: 'myuser' })}>Log in</button>
      <button onClick={() => logout()}>Log out</button>
    </div>
  );
};

const App = () => {
  return (
    <AuthProvider>
      <MyComponent />
    </AuthProvider>
  );
};

export default App;
